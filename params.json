{"name":"Suave.evreact","tagline":"","body":"### Suave.EvReact\r\n[EvReact](http://vslab.github.io/evreact) is a very lightweight library introducing an event-based orchestrator for reactive programming. In essence you can describe workflows orchestrated by events that advance the workflow and trigger the events associated with its nodes. Suave.EvReact is a very simple adapter for Suave that transforms HTTP requests into events to be\r\norchestrated by EvReact. It is useful whenever you need a specific sequence in URL invocations and ensure that a URL is\r\ninaccessible in a given state.\r\n\r\nHere is a very simple example\r\n\r\n    open Suave.EvReact\r\n    \r\n    open Suave\r\n    open Suave.Http\r\n    open Suave.Successful\r\n    open Suave.Web\r\n    open Suave.EvReact\r\n    open EvReact\r\n    open EvReact.Expr\r\n\r\n    // Create the EvReact events associated with URLs\r\n    let start = HttpEvent()\r\n    let work = HttpEvent()\r\n    let stop = HttpEvent()\r\n    let status = HttpEvent()\r\n\r\n    let jobs = ResizeArray<string>()\r\n\r\n    // chooseEvents is the only combiner currently featured by Suave.EvReact\r\n    // The list is (regex, event, default)\r\n    // Whenever the regex is matched by Suave the event is fired. \r\n    // The default web part can be overridden by assigining the Result property\r\n    // in the event\r\n\r\n    // In this example we have jobs that are started by accessing /start/id\r\n    // You perform some work only if the job is running with /work/id/arg\r\n    // You stop the job using /stop/id\r\n    let app = chooseEvents \r\n                [\r\n                    (\"/start/(\\\\d+)\", start, NO_CONTENT)\r\n                    (\"/work/(\\\\d+)/(\\\\d+)\", work, NO_CONTENT)\r\n                    (\"/stop/(\\\\d+)\", stop, NO_CONTENT)\r\n                    (\"/status\", status, NO_CONTENT)\r\n                ]\r\n    \r\n    // This EvReact net simply react to the status event by printing the list of jobs\r\n    let statusReq = !!status.Publish |-> (fun arg -> arg.Result <- OK (System.String.Join(\"<br/>\", jobs)))\r\n    \r\n    // Useful net generator expressing a loop until\r\n    let loopUntil terminator body = +( body / terminator ) - never\r\n    \r\n    // The orchestrator used to run the nets\r\n    let orch = EvReact.Orchestrator.create()\r\n    \r\n    // When start is received the function gets triggered\r\n    let startNet = !!start.Publish |-> (fun arg ->\r\n      // Read the id from the argument\r\n      let id = arg.Match.Groups.[1].Value\r\n      jobs.Add(id)\r\n    \r\n      // Set the response\r\n      arg.Result <- OK (sprintf \"Started job %s\" id)\r\n      \r\n      // The net performing the actual work is triggered only if the id is the one started\r\n      let doWork = (work.Publish %- (fun arg -> arg.Match.Groups.[1].Value = id)) |-> (fun arg ->\r\n        let value = int(arg.Match.Groups.[2].Value)\r\n        arg.Result <- OK ((value + 1).ToString())\r\n      )\r\n      \r\n      // We get the stop event and only if relates to the current id trigger the stopNet event\r\n      let stopNet = HttpEvent()\r\n      let stopThis = (stop.Publish %- (fun arg -> arg.Match.Groups.[1].Value = id))\r\n                     |-> (fun arg -> arg.Result <- OK(sprintf \"Job %s done\" id)\r\n                                     jobs.Remove(id) |> ignore \r\n                                     stopNet.Trigger(arg)\r\n                         )\r\n      // Start a net listening for the stop event\r\n      Expr.start HttpEventArgs.Empty orch stopThis |> ignore\r\n    \r\n      // Net looping forever unless the stopNet event fires\r\n      let net = (loopUntil [|stopNet.Publish|] doWork)\r\n    \r\n      // Starts the net\r\n      Expr.start HttpEventArgs.Empty orch net |> ignore\r\n    )\r\n    \r\n    // Starts the startNet and statusReq nets looping forever\r\n    Expr.start HttpEventArgs.Empty orch (+startNet)\r\n    Expr.start HttpEventArgs.Empty orch (+statusReq)\r\n      \r\n    // Starts Suave\r\n    startWebServer defaultConfig app\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}